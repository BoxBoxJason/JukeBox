user root;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    gzip  on;

    server {
        # Ports
        listen 8080;
        listen [::]:8080;
        listen 8443 ssl;
        listen [::]:8443 ssl;

        # Logs
        access_log /var/log/nginx/jukebox.access.log;
        error_log /var/log/nginx/jukebox.error.log;

        # SSL
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        # Serve static files
        root /opt/jukebox;
        index index.html;

        # Serve Vue files
        location / {
            try_files $uri /index.html;
        }

        # Redirect API requests to backend
        location /api/ {
            proxy_pass http://backend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Scheme $scheme;
        }

        # Redirect music stream requests to icecast container
        location = /stream {
            return 301 /stream/;
        }

        location /stream/ {
            proxy_pass http://broadcast:3001/stream;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Scheme $scheme;
        }

        # Redirect WebSocket requests to backend
        location /chat/ws {
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;

            # WebSocket-specific headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Preserve the original request headers
            proxy_set_header Host $host;
            proxy_set_header Origin $http_origin;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;

            # WebSocket timeout settings to prevent idle disconnections
            proxy_connect_timeout 20s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            send_timeout 600s;

            # Prevent buffering of WebSocket messages
            proxy_buffering off;
        }
    }
}
