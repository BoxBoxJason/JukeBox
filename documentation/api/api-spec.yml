openapi: 3.1.0
info:
  title: JukeBox REST API
  description: JukeBox REST API documentation
  version: 1.0.0
  termsOfService:
  contact:
    name: BoxBoxJason
    url: https://github.com/BoxBoxJason
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: ""
    description: Production server

paths:
  /api/health:
    get:
      summary: Health check
      description: Check the health of the web server and the database.
      tags:
        - health
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  database:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    post:
      summary: Create a new user
      description: Create a new user account.
      tags:
        - users
        - create
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete users depending on filters (admin only)
      description: Delete users depending on filters (admin only). WARNING, you should use the ban endpoint instead of this one.
      tags:
        - users
        - delete
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: username
          in: query
          description: Full username of a user to delete
          required: false
          schema:
            type: array
            items:
              type: string
        - name: email
          in: query
          description: Full email of a user to delete
          required: false
          schema:
            type: array
            items:
              type: string
        - name: reason
          in: query
          description: Reason for deletion
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: ID of a user to delete
          required: false
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get users depending on filters
      description: Get users depending on filters.
      tags:
        - users
        - get
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: username
          in: query
          description: Full username of a user to get
          required: false
          schema:
            type: array
            items:
              type: string
        - name: partial_username
          in: query
          description: Partial username of a user to get
          required: false
          schema:
            type: array
            items:
              type: string
        - name: id
          in: query
          description: ID of a user to get
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: banned
          in: query
          description: Filter users by banned status
          required: false
          schema:
            type: boolean
        - subscriber_tier:
          in: query
          description: Filter users by subscriber tier
          required: false
          schema:
            type: integer
        - name: admin
          in: query
          description: Filter users by admin status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}:
    get:
      summary: Get a user by ID
      description: Get a user by ID.
      tags:
        - users
        - get
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a user to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a user by ID
      description: Update a user by ID. Some fields are restricted to admin users.
      tags:
        - users
        - update
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username
                email:
                  type: string
                  description: New email
                password:
                  type: string
                  description: New password
                avatar:
                  type: string
                  format: binary
                  description: New avatar
                banned:
                  type: boolean
                  description: Ban or unban the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      description: Delete a user by ID. WARNING, you should use the ban endpoint instead of this one.
      tags:
        - users
        - delete
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a user to delete
          required: true
          schema:
            type: integer
        - name: reason
          in: query
          description: Reason for deletion
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}/ban:
    patch:
      summary: Ban or unban a user by ID
      description: |
        Ban or unban a user by ID. Using the endpoint will also censor all messages from the user. Admin only.
        If the ban parameter is not provided, the user ban status will be toggled.
      tags:
        - users
        - ban
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a user to ban
          required: true
          schema:
            type: integer
        - name: reason
          in: query
          description: Reason for ban
          required: true
          schema:
            type: string
        - name: ban
          in: query
          description: Ban or unban the user
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}/messages:
    get:
      summary: Get messages from a user by ID
      description: Get messages from a user by ID. Can apply filters.
      tags:
        - users
        - messages
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a user to get messages from
          required: true
          schema:
            type: integer
        - name: flagged
          in: query
          description: Filter messages by flagged status
          required: false
          schema:
            type: boolean
        - name: removed
          in: query
          description: Filter messages by removed status
          required: false
          schema:
            type: boolean
        - name: censored
          in: query
          description: Filter messages by censored status
          required: false
          schema:
            type: boolean
        - name: contains
          in: query
          description: Filter messages by content
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/messages:
    get:
      summary: Get messages depending on filters
      description: Get messages depending on filters.
      tags:
        - messages
        - get
      parameters:
        - name: sender
          in: query
          description: ID of the sender of the message
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: flagged
          in: query
          description: Filter messages by flagged status
          required: false
          schema:
            type: boolean
        - name: removed
          in: query
          description: Filter messages by removed status
          required: false
          schema:
            type: boolean
        - name: censored
          in: query
          description: Filter messages by censored status
          required: false
          schema:
            type: boolean
        - name: contains
          in: query
          description: Filter messages by content
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new message
      description: Create a new message.
      tags:
        - messages
        - create
      security:
        - HttpAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender:
                  type: integer
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete messages depending on filters (some features are admin only)
      description: Delete messages depending on filters (some features are admin only).
      tags:
        - messages
        - delete
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: sender
          in: query
          description: ID of the sender of the message
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: flagged
          in: query
          description: Filter messages by flagged status
          required: false
          schema:
            type: boolean
        - name: removed
          in: query
          description: Filter messages by removed status
          required: false
          schema:
            type: boolean
        - name: censored
          in: query
          description: Filter messages by censored status
          required: false
          schema:
            type: boolean
        - name: contains
          in: query
          description: Filter messages by content
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/messages/{id}:
    get:
      summary: Get a message by ID
      description: Get a message by ID.
      tags:
        - messages
        - get
      parameters:
        - name: id
          in: path
          description: ID of a message to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a message by ID
      description: Update a message by ID. Some fields are restricted to admin users.
      tags:
        - messages
        - update
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a message to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                flagged:
                  type: boolean
                removed:
                  type: boolean
                censored:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a message by ID
      description: Delete a message by ID.
      tags:
        - messages
        - delete
      security:
        - HttpAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of a message to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/login:
    post:
      summary: Login
      description: Login to the application.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username_or_email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/logout:
    post:
      summary: Logout
      description: Logout from the application.
      tags:
        - auth
      security:
        - HttpAuth: []
        - CookieAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/refresh:
    post:
      summary: Refresh token
      description: Refresh the token.
      tags:
        - auth
      security:
        - RefreshToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatar:
          type: string
        admin:
          type: boolean
        banned:
          type: boolean
        total_contributions:
          type: integer
        subscriber_tier:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: '#/components/schemas/User'
        content:
          type: string
        flagged:
          type: boolean
        removed:
          type: boolean
        censored:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
        type: object
        properties:
          error:
            type: string


  securitySchemes:
    HttpAuth:
      type: http
      scheme: bearer
      description: >
        Authentication using the `Authorization` header with a simple Bearer token.

    CookieAuth:
      type: apiKey
      in: cookie
      name: access_token
      description: >
        Authentication using a cookie named `access_token`

    RefreshToken:
      type: apiKey
      in: cookie
      name: refresh_token
      description: >
        Authentication using a cookie named `refresh_token`

tags:
  - name: health
    description: Health check
  - name: users
    description: User management
  - name: messages
    description: Message management
  - name: auth
    description: Authentication
